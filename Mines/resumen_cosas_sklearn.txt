from sklearn.model_selection import train_test_split
train, test = train_test_split(data, test_size = prop, random_state = n)


from sklearn.model_selection import StratifiedShuffle 
split = StratifiedShuffleSplit(n_splits = number, test_size = prop, random_state = number)
for train_index, test_index in split.split(data, labels):
	train = data.iloc[train_index]
	test = data.iloc[set_index]
for set_ in (train, test):
	set_.drop(var, axis = 1)


from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy = strategy)


from sklearn.preprocessing import OneHotEncoder
encoder = OneHotEncoder()


from sklearn.base import BaseEstimator, TransformerMixin
class Custom(BaseEstimator, TransformerMixin):
	def __init__(self, ...):
		body
	def fit(self, X, y = None):
		return self
	def transform(self, X):
		code
		.
		.	
		.
		return bla

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
pipelilne = Pipeline([
("id", transformer),
...,
("anotherid", anothertransformer)])
pipeline.fit_transform(data) #solo para datos num√©ricos, en los transformadores va el constructor de la clase

from sklearn.compose import ColumnTransformer


